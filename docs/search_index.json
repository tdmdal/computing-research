[["index.html", "Rotman Research Node User Guide Overview Rotman Research Node About this User Guide", " Rotman Research Node User Guide Overview Rotman Research Node Rotman Research Node (RRN) is a shared Linux server for the Rotman research community. The node is equipped with 32 cores, 1T memory, and 50T storage. It is an integrated part (login node) of a High-Performance Computing (HPC) system consisting of a cluster of around 100 compute nodes. Researchers can work directly on the Rotman node, but also has the option to scale up their computation by submitting large workloads to the compute nodes on the HPC system. Currently, default Rotman users have access to 8 compute nodes via a standard partition (a partition is a logical set of compute nodes). Each compute node has 24 CPUs and 240G memory. These compute nodes are also shared by researchers from another university. RRN is hosted at Centre for Advanced Computing (CAC). Rotman TD Management Data and Analytics Lab (TDMDAL) provides 1st-tier user support. Email tdmdal@rotman.utoronto.ca if you have any questions about the system. RRN is currently under beta test. We invite you to try the system and send us your feedback. About this User Guide This User Guide focuses on use cases most relevant to Rotman researchers on the RNN. It complements the CAC Wiki document, which covers the usage of the entire CAC HPC system. We encourage users with high computation needs to further read the CAC Wiki in order to take full advantage of the HPC system. "],["getting-started.html", "1 Getting Started 1.1 User Account 1.2 Logging on to RRN 1.3 Directory Structure and Disk Quota 1.4 Transferring Files 1.5 Loading Software", " 1 Getting Started 1.1 User Account RRN is available to all Rotman researchers. To request an account, please email TD Management Data and Analytics Lab at tdmdal@rotman.utoronto.ca. Once your account is created, you will receive an activation email together with login instructions. The process usually takes less than 1 business day. 1.2 Logging on to RRN You will need an SSH (Secure Shell) client to log on to RRN. For Windows users, we recommend MobaXterm. Mac users can use the SSH client provided by the pre-installed Terminal App. In addition, in order to run applications on the server with graphic user interfaces (GUI), Mac users should also install XQuartz. To log on to RRN, Open a terminal window. Windows users first launch the MobaXterm app, and then click the Start local terminal button in the home tab. Mac users simply run the Terminal app. Type the following command. (Replace yourUserName with your user name.) ssh -X yourUserName@rrlogin.cac.queensu.ca The -X option enables graphics forwarding so you can run applications with GUI. If you forget your password, you can go to this page to reset your password. 1.3 Directory Structure and Disk Quota You have three folders to store your data. All of them can only be accessed by you. Folder Path Quota Usage home folder /global/home/yourUserName/ 3T main storage project folder /global/project/rotman_research/yourUserName/ 50T shared additional storage scratch folder /global/scratch/yourUserName/ 5T temporary storage Note that your project folder shares 50T disk space with other Rotman project folders. The home folder is the landing folder when you log on to the system. The project and scratch folders can also be accessed via two symbolic links in your home folder: rotman_research and scratch. (The symbolic links are like shortcuts in Windows.) You can use the quota command to see your disk quota and current usage. In addition to the above folders, if you need another project folder for collaboration (i.e. share with other researchers), email us and we can help you set it up. 1.4 Transferring Files Its most convenient to use an SFTP (Secure File Transfer Protocol) client to transfer files between your local computer and RRN. WinSCP is a great free SFTP client for Windows users. Mac users can install FileZilla. Use the following information to configure your SFTP client. File protocol: SFTP Host name: rrlogin.cac.queensu.ca User name: (your username) Password: (your password) Port: 22 If you prefer to use command line tools, scp and rsync are good options. 1.5 Loading Software RRN uses Environment Modules to manage its software. Environment modules treat each software and its associated files as a distinct package to be loaded on demand. It resolves conflicts between multiple versions of a software package and configures the environment necessary for running a package. Below are a few commonly used module command. Description Module Command List all available software packages module avail Display a short description of a package module spider packageName Load a package module load packageName Load a specific version of a package module load packageName/version List currently loaded packages module list Unload a package module unload packageName Unload all packages module purge For example, to load the Anaconda Python 3 package, type the below command. module load anaconda/3.5.3 RRN has a large collection of software tools installed. Section Using Software provides more details on how to setup some commonly used ones. "],["using-software.html", "2 Using Software 2.1 Best Practice 2.2 Using Python 2.3 Using R 2.4 Using Matlab 2.5 Using Stata 2.6 Managing Jobs in Batch Mode", " 2 Using Software 2.1 Best Practice 2.1.1 Interactive mode vs batch mode Most applications can run either in interactive mode or in batch mode. For small jobs, it really doesnt matter which one you choose. For medium to large jobs, you could still code and debug your work in the interactive mode, but you should run your work in batch mode once its fully tested as probably you dont want to wait in front of the screen for your job to finish. If you use batch mode, youll have the convenience of logging off the system and logging in later to check the result. You can do so by pre- and post-face your applications batch mode command with the Linux command nohup and control operator &amp;. nohup &lt;batch mode command&gt; &amp; nohup prevents your job from being killed when you log off the system. The &amp; at the end makes the command run in the background. For example, suppose you use Stata and you have a do file named filename.do that takes hours to run, you could run it in batch mode as below. nohup stata -b do filename &amp; 2.1.2 RRN vs compute nodes RRN is actually integrated with a High-Performance Computing (HPC) system. The HPC system has a cluster of around 100 compute nodes and hundreds of CPUs. Currently, Rotman users have access to 8 compute nodes via a standard partition (a partition is just a logical set of compute nodes). Each compute node has 24 CPUs and 240G memory. Since RRN is shared by many Rotman researchers, if you have a very large compute-intensive job, you should consider submitting it to the compute nodes instead of running it on RRN. Although the compute nodes are also shared, once you obtain the requested resources (CPUs, memory, etc.) from the compute nodes, they are exclusive resources for your during your computation. See this CAC document to learn how to submit jobs to compute nodes. 2.2 Using Python 2.2.1 Setup Different versions and distributions of Python are available on RRN including Standard Python 2 and 3 releases, Anaconda Distribution 2 and 3, and Python 2 and 3 with MPI4Py and Scipy stack. (Use module avail to list all available software on RRN.) We recommend you use Anaconda Distribution 3 as it comes with a collection of useful Python packages and a good package and environment manager conda. Load the Anaconda Python 3 as below. module load anaconda/3.5.3 See more on setting up virtual environment for Python projects below (section [Installing packages]). 2.2.2 Interactive mode (Python console) To use Python in interactive mode (Python console), type python in the terminal. Type exit() to exit the Python console. 2.2.3 Batch mode To use Python in batch mode, use python mycode.py To capture standard output stdout and standard error stderr (usually displayed on screen) in a log file, use python mycode.py &amp;&gt; mycode_log.txt &amp;&gt; redirects standard output and error streams to a file specified. Nothing will be printed in the terminal. If the file already exists, it gets overwritten. Pre- and post-face the above command with the Linux command nohup and control operator &amp; so that the job will run in background and wont be killed even you log off the system (see section Interactive mode vs batch mode). nohup python mycode.py &amp;&gt; mycode_log.txt &amp; 2.2.4 Install packages To install a new Python package, use pip install --user &lt;packageName&gt; The above command installs a package to the base environment under your home directory. However, the best practice to manage Python packages is to create a virtual environment for each of your Python project. In a project virtual environment, you only need to install packages required for the specific project. In that way, you can avoid potential package conflicts between projects. We assume you use Anaconda Python 3 distribution on RRN. Below are steps to setup a virtual environment and install new packages. Load Anaconda Python 3 distribution. module load anaconda/3.5.3 Create a virtual environment . conda create --name myenv conda is a package management system. myenv is the specified environment name. (You may want to pick your own name.) Anaconda/3.5.3 comes with Python 3.6.3. If you wish to use a newer version of Python, you could create a virtual environment with a specific version of Python. For example, create a virtual environment with Python 3.8: conda create --name myenv python=3.8 Activate the virtual environment. source activate myenv Note: For conda 4.6 or later version, you can use conda activate myenv to activate the environment. The default conda version on RRN is 4.5.11 (use conda --version to see it). However, if you still want to use conda activate myenv (for future proof), do the following. Run the below command once, logout, and re-login. Once you login, run (1) again to load the anaconda module. This command adds a line to .bashrc file so that you can use conda activate to activate the virtual environment you just created in step (2) echo &quot;. /global/software/python/anaconda3/etc/profile.d/conda.sh&quot; &gt;&gt; ~/.bashrc Install packages. Now you are inside your virtual environment. You should see (myenv) in the terminal prompt. This is an isolated environment that you can manage the packages to be installed. For example, you can install tensorflow and keras by using conda install &lt;packageName&gt;. All package dependencies will be installed automatically. conda install tensorflow conda install keras Note that a new virtual environment has no packages pre-installed (except Python standard libraries). If you are not able to find a package with conda install &lt;pacakgeName&gt; (packages built and maintained by Anaconda official channel) or conda install -c conda-forge &lt;packageName&gt; (packages built and maintained by conda community), you can still try pip install &lt;pacakgeName&gt;, although you would need to first install pip using conda install pip. Return to base environment. After youre done with Python, type source deactivate to return to the base environment. (If you have followed the Note in step 3, you can use conda deactivate instead.) Next time, all you need to do is step (1) and (3) to start the virtual environment and using Python. Refer to condas official document for more on virtual environment and package management. 2.2.5 Run Python on compute nodes For large compute-intensive Python jobs, consider submitting them to the compute nodes (see RRN vs compute nodes). The following document on the CAC Wiki site can get you started. How to run jobs using a scheduler 2.3 Using R 2.3.1 Setup Several versions of R are available on RRN. (Use module avail to list all available software on RRN.) Load the R version you prefer, for example, R 3.4.0, and you are good to start using R. module load r/3.4.0 If you need to use RStudio, you will need to setup R in a different way. see RStudio on RRN for instructions. 2.3.2 Interactive mode (R console) To start R in interactive mode (R console), type R in the terminal. Type quit() to quit the R console. 2.3.3 Batch mode To use R in batch mode, use Rscript mycode.R See Rscript manual for more options. To capture standard output stdout and standard error stderr (usually displayed on screen) in a log file, use Rscript mycode.R &amp;&gt; mycode_log.txt &amp;&gt; redirects standard output and error streams to a file specified. Nothing will be printed in the terminal. If the file already exists, it gets overwritten. Pre- and post-face the above command with the Linux command nohup and control operator &amp; so that the job will run in background and wont be killed even you log off the system (see section Interactive mode vs batch mode). nohup Rscript mycode.R &amp;&gt; mycode_log.txt &amp; 2.3.4 Install R packages In the R console, type the below command to list current installed packages. installed.packages() To install additional packages, use the command: install.packages(&quot;packageName&quot;) Packages will be built from the source and installed under your home directory. If you encounter problems building a package, its likely that the default Intel compiler doesnt work well with your package. In this case, before you install the package, in your Linux terminal (not in the R console), load the gcc compiler using the below command, and then start R console and install the package again. module load gcc/7.3.0 2.3.5 Run R on compute nodes For large compute-intensive R jobs, consider submitting them to the compute nodes (see RRN vs compute nodes). 2.3.6 RStudio on RRN RStudio is not installed on RRN. To install it on your own, the easiest way is to use R and RStudio from Anaconda distribution. You can create a virtual environment using Anacondas package management tool conda and install R and RStudio in it. Anaconda is mostly known for its Python distribution, but it recently start to distribute R as well. Load Anaconda distribution. module load anaconda/3.5.3 Create a virtual environment . conda create --name r_env conda is a package management system. r_env is the specified environment name. (You may want to pick your own name.) Activate the virtual environment. source activate r_env Note: For conda 4.6 or later version, you can use conda activate r-env to activate the environment. The default conda version on RRN is 4.5.11 (use conda --version to see it). However, if you still want to use conda activate r_env (for future proof), do the following. Run the below command once, logout, and re-login. Once you login, run (1) again to load the anaconda module. This command adds a line to .bashrc file so that you can use conda activate to activate the virtual environment you just created in step (2) echo &quot;. /global/software/python/anaconda3/etc/profile.d/conda.sh&quot; &gt;&gt; ~/.bashrc Install R, RStudio and R packages. Now you are inside your virtual environment. You should see (r_env) in the terminal prompt. This is an isolated environment that you can manage the packages to be installed. Lets install base R, some essential R packages and RStudio. conda install r-base r-essentials rstudio Use conda list to display all packages installed in your virtual environment. Installing other R packages is similar. Simply use conda install -c r &lt;pacakgeName&gt; Note that we use conda for package management instead of R itself (install.packages()). The advantage of using conda is that it takes care of the package dependency for us. This is especially helpful when a package is partially developed using languages other than R (e.g. C++). The -c r option means installing package from the r channel. This channel is maintained by Anaconda. See this official Anaconda document for all R packages maintained. Note the r- prefix to the usual R package name. If you are not able to find an R package with conda install -c r &lt;pacakgeName&gt; (packages built and maintained by Anaconda official channel) or conda install -c conda-forge &lt;packageName&gt; (packages built and maintained by conda community), you can still try install.packages(\"packageName\") in R console as discussed in Install R packages. Start RStudio by typing rstudio in the terminal. (Type rstudio &amp; will start RStudio and return you the terminal prompt.) Return to base environment. After youre done with R, type source deactivate to return to the base environment. (If you have followed the Note in step 3, you can use conda deactivate instead.) Next time, all you need to do is step (1) and (3) to start the virtual environment and using R. Refer to condas official document for more on virtual environment and package management. Note that condas official document mainly targets Python user. 2.4 Using Matlab 2.4.1 Setup Send a signed MATLAB usage statement form to cac.admin@queensu.ca and cc tdmdal@rotman.utoronto.ca. This will add you to the matlab group that allows access to the software. To check if you have been authorized access, type groups while logged on to the system. If matlab appears in the output, you are good to go! Type module avail matlab to see available Matlab versions, and then load the one you want to use. Currently, two versions of Matlab are installed (R2017a and R2018b). For example, if you want to use Matlab 2018b, type module load matlab/R2018b 2.4.2 Interactive mode without GUI To start Matlab in interactive mode without GUI, type the command below. matlab -nodisplay -nosplash 2.4.3 Interactive mode with GUI To start Matlab in interactive mode with GUI, simply type matlab in the terminal. If you use Matlab/R2017a, you may find the Matlab GUI a bit lagging. In this case, in the folder where you start Matlab, create a file named java.opts and add the following line in it. This should resolve the GUI problem. -Dsun.java2d.pmoffscreen=false 2.4.4 Batch mode To run Matlab in batch mode, use matlab -nodisplay -nodesktop -nosplash &lt;mycode.m &gt;output.txt The &lt; symbol tells the matlab command to take the Matlab m file mycode.m as input. The &gt; symbol redirects the output to the output.txt file instead of printing it to the screen. Pre- and post-face the above command with the Linux command nohup and control operator &amp; so that the job will run in background and wont be killed even you log off the system (see section Interactive mode vs batch mode). nohup matlab -nodisplay -nodesktop -nosplash &lt;mycode.m &gt;output.txt &amp; 2.4.5 Run Matlab on compute nodes For large compute-intensive Matlab jobs, consider submitting them to the compute nodes (see RRN vs compute nodes). The following two documents on the CAC Wiki site can get you started. How to run jobs using a scheduler An example of a MATLAB job script 2.5 Using Stata 2.5.1 Setup Load the Stata module to setup its environment. Type the command below in the terminal. module load stata15 2.5.2 Interactive mode without GUI To start Stata/IC in interactive mode without GUI (Stata console mode), type stata in the terminal. Use stata-se for Stata/SE and stata-mp for Stata/MP. 2.5.3 Interactive mode with GUI To start Stata/IC in interactive mode with GUI, use xstata (use xstata-se for Stata/SE and xstata-mp for Stata/MP). You will lose your terminal command line prompt once the Stata GUI is running. Alternatively, use xstata &amp; (xstata-se &amp; or xstata-mp &amp;) to run the command in background and return the command line prompt. 2.5.4 Batch mode To run Stata/IC in batch mode, use stata -b do filename &amp; Stata will execute the commands in filename.do and will automatically save the output in filename.log. The &amp; at the end tells Linux to run the command in the background, freeing up your command line prompt. If your code takes a long time to run, you may wish to start a batch Stata job, log off from your terminal, and log back in later to retrieve the output. To do this, preface the previous command with nohup. nohup stata -b do filename &amp; nohup prevents your job from being killed when you log off the system. Similarly, replace stata with stata-se for Stata/SE or stata-mp for Stata/MP. 2.5.5 A note on Stata/MP We have Stata/MP 32-core installed on the system. Since RRN is a 32-core node shared by many users, we request that you set the number of processors for Stata/MP to be less than 16 when you use it on RRN. Use set processors # to set the number of processors for Stata/MP. For example, set processors 12 Put it on the first line in your do file or run it first if you use interactive mode. If you have a large workload that requires many cores and hours to run, your should consider submitting your job to the compute nodes on the HPC system. In that case, you can request a 32-core node to take full advantage of the 32-core Stata/MP licence. (See How to run jobs using a scheduler on the CAC Wiki site to get started.) 2.6 Managing Jobs in Batch Mode 2.6.1 Monitor jobs Once your programs are running in the background, you can monitor their resource usage and performance using the htop utility. Simply type htop in the terminal to start the utility. htop also shows you information about other programs/processes running on the system so its also a great tool to see how busy the RRN is overall. The Linux manual for htop is a bit hard to read. You could perhaps get started with this visual tutorial, or this YouTube tutorial. 2.6.2 Terminate jobs If you want to terminate your program running in the background, you could use htop as well (F9/Kill). Alternatively, first find your programs process id. ps -u yourUserName Then, use the kill command. kill programProcessID If the above command doesnt work, try the kill -9 option. kill -9 programProcessID "],["linux-command-quick-reference.html", "3 Linux Command Quick Reference", " 3 Linux Command Quick Reference RRN runs Linux operating system with a default Bash shell. (A shell is an environment to interact with the Linux system and run other programs.) If you are not familiar with Linux command, the two tutorials below can get you started. The Unix Shell by Software Carpentry. Learning the Shell by William Shotts. Below we also provide a quick reference to some commonly used Linux commands. Basics man &lt;commmand&gt;: display help manual for &lt;command&gt;, e.g., man man. Hit the key q to quit the manual display. whoami: display your user name. \\(\\uparrow\\) key: get the previous command you used. TAB key: auto-complete a command when there is no ambiguity. For example, type whoa and then hit the TAB key. Files and directories: basic navigation .: single dot is not a command. It stands for current directory. ..: double dots stands for parent directory. ~: tilde stands for home directory. pwd: print work directory, i.e. find out your current directory. ls: list files and directories in the current directory. ls -alh: ls with options a(list all files including the hidden ones) l(display in long list format) and h (show file size in human-readable unit). cd dirname: change directory to dirname. For example, cd .. takes you to the parent directory. cd or cd ~: go to your home directory. Files and directories: create, copy, rename and delete mkdir dirname: create a new directory (in the current directory). rmdir dirname: delete a directory (only works when the directory is empty). rm -r dirname: delete a directory including files and sub-directories inside it. Use with caution! cat filename: display the content of a (text) file. more filename: display (text) file content one screen at a time. Hit space for next screen, and q to quit. nano filename: create or edit a file. nano is a text editor pre-installed on RRN. Its easy to use and great for simple text editing. Other editors available on RRN are gedit, vim and emacs. rm filename: delete a file. mv oldname newname: rename a file or directory from oldname to newname. mv file_dir dir: move a file or directory to another directory. For example, mv *.txt .. moves all files with txt extension to the parent directory. Asterisk * is a wildcard representing any sequence of characters. cp file dir: copy a file to another directory. cp -r dir1 dir2: copy a directory (dir1) including files and sub-directories to another directory dir2. "]]
